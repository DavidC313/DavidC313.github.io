@page "/"
@using X00181967CA3.Models
@inject HttpClient Http

<div class="container mt-5">
    <div class="text-center mb-4">
        <h1 class="display-4 text-success">⚽ Football Player Finder</h1>
        <p class="text-muted">Search for your favorite football players and view their details.</p>
    </div>

    <!-- Search Input -->
    <div class="input-group mb-3">
        <input type="text" @bind="searchQuery" class="form-control" placeholder="Enter player name" />
        <button class="btn btn-success" @onclick="Search">Search</button>
    </div>

    <!-- Filters -->
    <div class="row mb-4">
        <div class="col-md-6">
            <label for="teamFilter" class="form-label">Filter by Team</label>
            <select id="teamFilter" class="form-select" @onchange="FilterByTeam">
                <option value="">All Teams</option>
                @foreach (var team in teams)
                {
                    <option value="@team">@team</option>
                }
            </select>
        </div>
        <div class="col-md-6">
            <label for="popularityFilter" class="form-label">Filter by Popularity</label>
            <select id="popularityFilter" class="form-select" @onchange="FilterByPopularity">
                <option value="All">All Popularities</option>
                <option value="High">High</option>
                <option value="Medium">Medium</option>
                <option value="Low">Low</option>
            </select>
        </div>
    </div>

    <p class="text-danger">@errorMessage</p>

    @if (isLoading)
    {
        <div class="text-center mt-4">
            <div class="spinner-border text-success" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2">Fetching player data...</p>
        </div>
    }
    else if (filteredPlayers.Any())
    {
        <div class="table-responsive mt-4">
            <table class="table table-striped table-hover align-middle">
                <thead class="table-success">
                    <tr>
                        <th>Player</th>
                        <th>Team</th>
                        <th>Popularity</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var player in filteredPlayers)
                    {
                        <tr>
                            <td>
                                <div class="d-flex align-items-center">
                                    <img src="@player.ImageUrl" alt="@player.Name" class="rounded-circle me-3" style="width:50px; height:50px;" />
                                    <span>@player.Name</span>
                                </div>
                            </td>
                            <td>@player.Team</td>
                            <td>@player.Popularity</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else
    {
        <div class="text-center mt-4">
            <p class="text-muted">No players found. Try searching for a different name or adjust the filters!</p>
        </div>
    }
</div>

@code {
    private string searchQuery = "";
    private string errorMessage = "";
    private bool isLoading = false;
    private List<Player> players = new();
    private List<Player> filteredPlayers = new();
    private List<string> teams = new();
    private string selectedTeam = "";
    private string selectedPopularity = "All";

    private async Task Search()
    {
        errorMessage = "";
        if (string.IsNullOrWhiteSpace(searchQuery))
        {
            errorMessage = "Please enter a search term.";
            return;
        }

        isLoading = true;
        try
        {
            players = await PlayerService.SearchPlayersAsync(Http, searchQuery);
            teams = players.Select(p => p.Team).Distinct().ToList();
            ApplyFilters();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void FilterByTeam(ChangeEventArgs e)
    {
        selectedTeam = e.Value?.ToString() ?? "";
        ApplyFilters();
    }

    private void FilterByPopularity(ChangeEventArgs e)
    {
        selectedPopularity = e.Value?.ToString() ?? "All";
        ApplyFilters();
    }

    private void ApplyFilters()
    {
        filteredPlayers = players;

        if (!string.IsNullOrEmpty(selectedTeam))
        {
            filteredPlayers = filteredPlayers.Where(p => p.Team == selectedTeam).ToList();
        }

        if (selectedPopularity == "High")
        {
            filteredPlayers = filteredPlayers.Where(p => int.TryParse(p.Popularity, out var popularity) && popularity >= 80).ToList();
        }
        else if (selectedPopularity == "Medium")
        {
            filteredPlayers = filteredPlayers.Where(p => int.TryParse(p.Popularity, out var popularity) && popularity >= 50 && popularity < 80).ToList();
        }
        else if (selectedPopularity == "Low")
        {
            filteredPlayers = filteredPlayers.Where(p => int.TryParse(p.Popularity, out var popularity) && popularity < 50).ToList();
        }
    }
}
